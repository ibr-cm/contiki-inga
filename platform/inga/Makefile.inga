CONTIKI_TARGET_DIRS = . dev

CONTIKI_CORE=contiki-inga-main
CONTIKI_TARGET_MAIN = ${CONTIKI_CORE}.o
CONTIKI_TARGET_SOURCEFILES += contiki-inga-main.c
# INGA platform source files
INGA_INTERFACES = i2c.c  mspi.c sdcard.c 
INGA_DRIVERS = leds-arch.c adc.c at45db.c adxl345.c bmp085.c l3g4200d.c mpl115a.c
INGA_SENSORS = sensors.c acc-sensor.c adc-sensor.c battery-sensor.c \
	       button-sensor.c gyro-sensor.c pressure-sensor.c radio-sensor.c
INGA_SOURCEFILES += $(INGA_INTERFACES) $(INGA_DRIVERS) $(INGA_SENSORS)

ifeq ($(REV),)
  $(info INGA revison not set, defaults to REV=1.4)
  CFLAGS += -DINGA_CONF_REVISION=INGA_REV_14
else ifeq ($(REV),1.2)
  CFLAGS += -DINGA_CONF_REVISION=INGA_REV_12
else ifeq ($(REV),1.4)
  CFLAGS += -DINGA_CONF_REVISION=INGA_REV_14
else ifeq ($(REV),1.5)
  CFLAGS += -DINGA_CONF_REVISION=INGA_REV_15
else ifeq ($(REV),2.0)
  CFLAGS += -DINGA_CONF_REVISION=INGA_REV_20
endif


# Enable SLIP support
ifeq ($(CONF_SLIP),1)
  INGA_SOURCEFILES += slip_uart0.c slip.c slip-bridge.c
  CFLAGS += -DINGA_CONF_WITH_SLIP=1
endif

CONTIKI_TARGET_SOURCEFILES += $(INGA_SOURCEFILES)

# Enable IPv6
ifeq ($(UIP_CONF_IPV6),1)
  CFLAGS += -DWITH_UIP6=1
endif

# Enable settings manager
CFLAGS += -DCONTIKI_CONF_SETTINGS_MANAGER=1

# TODO: find a better solution for diskio.c
CONTIKI_TARGET_SOURCEFILES += cfs-coffee-arch.c

# For a coffee file system, the application makefile can define COFFEE_DEVICE=n
# to select the type and COFFEE_ADDRESS=0xaaaaaaaa as the starting byte address.
# If only one is define the other will use the (Raven webserver 1284p) defaults
# of a static file system in program flash starting at 0x10000 (word address=0x8000)
# For program flash the starting address is rounded down to a page boundary in cfs-coffee-arch.h
# It should be rounded down here too if someone can figure out how :)
COFFEE_DEFAULT_ADDR=0x0 

ifdef COFFEE_DEVICE                    # if files are defined force definition of COFFEE_ADDRESS
  ifndef COFFEE_ADDRESS
    ifeq ($(COFFEE_DEVICE), 1)         # 1 = eeprom static
      $(info Coffee in EEPROM (static))
      COFFEE_ADDRESS=$(COFFEE_DEFAULT_ADDR) 
    else ifeq ($(COFFEE_DEVICE), 2)    # 2 = eeprom dynamic
      $(info Coffee in EEPROM (dynamic))
      COFFEE_ADDRESS=$(COFFEE_DEFAULT_ADDR) 
    else ifeq ($(COFFEE_DEVICE), 3)    # 3 = program flash static
      $(info Coffee in Flash (static))
      COFFEE_ADDRESS=0x14000
    else ifeq ($(COFFEE_DEVICE), 4)    # 4 = program flash dynamic
      $(info Coffee in Flash (dynamic))
      COFFEE_ADDRESS=0x10000
    else ifeq ($(COFFEE_DEVICE), 5)    # 5 = INGA external flash
      $(info Coffee in external Flash)
      COFFEE_ADDRESS=$(COFFEE_DEFAULT_ADDR) 
    else ifeq ($(COFFEE_DEVICE), 6)    # 6 = INGA SDCard slot
      $(info Coffee on SD-Card)
      COFFEE_ADDRESS=$(COFFEE_DEFAULT_ADDR)
    else
      $(error Unsupported coffee file type $(COFFEE_DEVICE), supported are \
        1=EEPROM static, \
        2=EEPROM dynamic, \
        3=Flash static, \
        4=Flash dynamic, \
        5=Flash external, \
        6=SD card)
    endif
  endif
endif # COFFEE_DEVICE


ifdef COFFEE_ADDRESS
  CFLAGS += -DCOFFEE_DEVICE=$(COFFEE_DEVICE) -DCOFFEE_ADDRESS=$(COFFEE_ADDRESS)
  # NOTE: This is only for the makefsdata tool
  ifneq ($(COFFEE_ADDRESS), COFFEE_DEFAULT_ADDR)
    LDFLAGS+= -Wl,--section-start=.coffeefiles=$(COFFEE_ADDRESS)
  endif

# If $make invokation passed starting address use phony target to force synchronization of source to .coffeefiles section
# Warning: recompilation will not be forced if the starting address is then dropped, with dire consequences:
#  -->Source that uses COFFEE_DEVICE and read macros for conditional compilation will be left hanging!
#  -->Object modules that used .coffeesection will overlap the .data section.
#  -->$make clean is safest.
#ifeq ($(origin COFFEE_ADDRESS), command line)
# ifeq ($(COFFEE_DEVICE), 2)      #safest to force recompilation even if eeprom address is changed, might have been switched from flash
   .PHONY : coffee
   coffee:
   $(OBJECTDIR)/cfs-coffee-arch.o    : coffee      #cfs-coffee-arch uses COFFEE_DEVICE, COFFEE_ADDRESS
   $(OBJECTDIR)/contiki-raven-main.o : coffee      #Raven Webserver uses COFFEE_DEVICE
   $(OBJECTDIR)/httpd-fs.o           : coffee      #this file contains httpd-fsdata.c which has the .coffeesection data
   $(OBJECTDIR)/httpd.c.o            : coffee      #uses defines to read from file system
   $(OBJECTDIR)/httpd-cgi.o          : coffee      #uses defines to read from file system
   $(OBJECTDIR)/cfs-coffee.o         : coffee      #core routine requires recompilation

# endif
#endif
endif # COFFEE_ADDRESS


CONTIKIAVR=$(CONTIKI)/cpu/avr
CONTIKIBOARD=.

INGA_FCPU=8000000UL
INGA_DEFS=-DAUTO_CRC_PADDING=2
CONTIKI_PLAT_DEFS = -DF_CPU=$(INGA_FCPU) $(INGA_DEFS)
#CONTIKI_PLAT_DEFS = -DF_CPU=8000000UL -DAUTO_CRC_PADDING=2

MCU=atmega1284p

### Avrdude Options

#AVRDUDE_PROGRAMMER=jtag2
AVRDUDE_PROGRAMMER=avr109

# For usb devices, you may either use PORT=usb, or (e.g. if you have more than one
# programmer connected) you can use the following trick to find out the serial number:
#
# The example is for an JTAGICE mkII used to program an ATmega128:
# avrdude -v -P usb:xxxx -c jtag2 -p atmega128
#AVRDUDE_PORT=usb:00B000000D79
#AVRDUDE_PORT=usb

# Additional avrdude options
# Verify off
#AVRDUDE_OPTIONS=-V
# Baudrate
AVRDUDE_OPTIONS=-b 230400

ifndef INGA_CONF_BAUDRATE
  INGA_CONF_BAUDRATE = 500000
endif
CFLAGS+=-DUSART_BAUD_INGA=USART_BAUD_$(INGA_CONF_BAUDRATE)

ifdef MOTES
  MOTELIST=1
  CMOTES=$(MOTES)
  MOTE=1;
endif

UNAME := $(shell uname)

ifeq ($(UNAME), Darwin)
  # Mac OS X
  SERIALDUMP = $(CONTIKI)/tools/sky/serialdump-macos
  MOTELIST ?= $(CONTIKI)/tools/sky/motelist-macos
  MOTES ?= $(shell $(MOTELIST) 2>&- | grep usbserial | \
	  cut -f 4 -d \  | \
	  perl -ne 'print $$1 . " " if(m-(/dev/\w+\.\w+\-\w+)-);')
else ifeq ($(UNAME), Linux)
  # Linux
  INGA_RESET = $(CONTIKI)/tools/inga/inga_tool/inga_tool
  SERIALDUMP = $(CONTIKI)/tools/sky/serialdump-linux
  MOTELIST ?= $(CONTIKI)/tools/sky/motelist-linux
  MOTES ?= $(shell $(MOTELIST) 2>&- | grep USB | \
	  cut -f 4 -d \  | \
	  perl -ne 'print $$1 . " " if(m-(/dev/\w+)-);')
else
  $(warning Operating system '$(UNAME)' not supported)
endif

CMOTES=$(MOTES)

motelist:
	$(MOTELIST)

motes:
	@echo $(MOTES)

reset:
ifeq ($(UNAME), Linux)
	@make -C $(CONTIKI)/tools/inga/inga_tool
	@echo MOTES: $(MOTES)
	@$(foreach PORT, \
	  $(MOTES), \
	  if test -x $(INGA_RESET); then \
	    $(INGA_RESET) -d $(PORT) -r; \
	  fi;)
	@wait $!
	@echo Waiting 0.5s; sleep 0.5
else
	$(warning resetting not supported)
endif


login:
	$(SERIALDUMP) -b$(INGA_CONF_BAUDRATE) $(firstword $(CMOTES))

AVRDUDE_PORT=$(CMOTES)

%.upload:  %.hex reset
ifeq ($(MOTES),)
	$(warning No device connected)
else
	@echo Uploading...
	$(foreach PORT, \
	  $(MOTES), \
	  avrdude $(AVRDUDE_OPTIONS) -P $(PORT) $(AVRDUDE_PROGRAMMER) -p $(MCU) -U flash:w:$<& )wait $!
	@echo Upload done.
endif

include $(CONTIKIAVR)/Makefile.avr
include $(CONTIKIAVR)/radio/Makefile.radio

MODULES += core/net/ipv6 core/net/ip core/net/mac core/net core/net/rime core/net/mac/sicslowmac core/net/rpl
